
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## install.packages("dplyr")
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 4.0.3 
> ## 
> ## Attaching package: 'dplyr'
> ## The following objects are masked from 'package:stats':
> ## 
> ##     filter, lag
> ## The following objects are masked from 'package:base':
> ## 
> ##     intersect, setdiff, setequal, union
> ##
> 
> #####
> ## Downloading the data and preparing the data
> ## Use the directory ".data' as working directory
> currdir <- "./data"
> if(!dir.exists("./data")) dir.create("./data")
> setwd(currdir)
> 
> downloadurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
> zipfile <- "UCI HAR Dataset.zip"
> download.file(downloadurl, zipfile)
trying URL 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
Content type 'application/zip' length 62556944 bytes (59.7 MB)
downloaded 59.7 MB

> 
> if(file.exists(zipfile)) unzip(zipfile)
> 
> ####
> ## Files are downloaded and the following files exist
> ##
> basedir <- "UCI HAR Dataset"
> featuresfile <- paste(basedir, "features.txt", sep="/")
> activitylabelsfile <- paste(basedir, "activity_labels.txt", sep="/")
> testvariablesfile <- paste(basedir, "test/X_test.txt", sep="/")
> testactivityfile <- paste(basedir, "test/y_test.txt", sep="/")
> testsubjectfile <- paste(basedir, "test/subject_test.txt", sep="/")
> trainvariablesfile <- paste(basedir, "train/X_train.txt", sep="/")
> trainactivityfile <- paste(basedir, "train/y_train.txt", sep="/")
> trainsubjectfile <- paste(basedir, "train/subject_train.txt", sep="/")
> 
> neededfiles <- c(featuresfile,
+                  activitylabelsfile,
+                  testvariablesfile,
+                  testactivityfile,
+                  testsubjectfile,
+                  trainvariablesfile,
+                  trainactivityfile,
+                  trainsubjectfile
+                  )
> sapply(neededfiles, function(f) if(!file.exists(f)) stop(paste("Needed file ", f, " doesn't exist. Exitting ...", sep="")))
$`UCI HAR Dataset/features.txt`
NULL

$`UCI HAR Dataset/activity_labels.txt`
NULL

$`UCI HAR Dataset/test/X_test.txt`
NULL

$`UCI HAR Dataset/test/y_test.txt`
NULL

$`UCI HAR Dataset/test/subject_test.txt`
NULL

$`UCI HAR Dataset/train/X_train.txt`
NULL

$`UCI HAR Dataset/train/y_train.txt`
NULL

$`UCI HAR Dataset/train/subject_train.txt`
NULL

> ## $`UCI HAR Dataset/features.txt`
> ## NULL
> ## 
> ## $`UCI HAR Dataset/activity_labels.txt`
> ## NULL
> ## 
> ## $`UCI HAR Dataset/test/X_test.txt`
> ## NULL
> ## 
> ## $`UCI HAR Dataset/test/y_test.txt`
> ## NULL
> ## 
> ## $`UCI HAR Dataset/test/subject_test.txt`
> ## NULL
> ## 
> ## $`UCI HAR Dataset/train/X_train.txt`
> ## NULL
> ## 
> ## $`UCI HAR Dataset/train/y_train.txt`
> ## NULL
> ## 
> ## $`UCI HAR Dataset/train/subject_train.txt`
> ## NULL
> ####
> ## Read featuresfile
> features <- read.table(featuresfile, col.names=c("rownumber","variablename"))
> ####
> 
> ####
> ## Fix the issue with duplicate names (e.g.) 516. fBodyBodyAccJerkMag-mean()
> ####
> allvariables <- 
+   mutate(features, variablename = gsub("BodyBody", "Body", variablename))
> 
> ####
> ## Filter the 66 variables - mean() and std()
> ####
> neededvariables <- filter(allvariables, grepl("mean\\(\\)|std\\(\\)", variablename))
> 
> ####
> ## Make the allvariables readable
> ##    Remove special characters, Convert to lower case
> ####
> allvariables <- mutate(allvariables, variablename = gsub("-", "", variablename),
+                                      variablename = gsub("\\(", "", variablename),
+                                      variablename = gsub("\\)", "", variablename),
+                                      variablename = tolower(variablename))
> 
> ####
> ## Make the neededvariables readable
> ##    Remove special characters, Convert to lower case
> ####
> neededvariables <- mutate(neededvariables, variablename = gsub("-", "", variablename),
+                                            variablename = gsub("\\(", "", variablename),
+                                            variablename = gsub("\\)", "", variablename),
+                                            variablename = tolower(variablename))
> 
> ####
> ## Read activitylabelsfile
> activitylabels <- read.table(activitylabelsfile, col.names=c("activity", "activitydescription"))
> ####
> 
> ####
> ## Read in test data stats
> ####
> testvalues <- read.table(testvariablesfile, col.names = allvariables$variablename)
> testneededvalues <- testvalues[ , neededvariables$variablename]
> ####
> 
> ## Read in test activities
> testactivities <- read.table(testactivityfile, col.names=c("activity"))
> ####
> 
> ####
> ## Read in test subjects
> testsubjects <- read.table(testsubjectfile, col.names=c("subject"))
> ####
> 
> ####
> ## Add a readable activity description
> testactivitieswithdescr <- merge(testactivities, activitylabels)
> ####
> 
> ####
> ## Put the test data together
> ##    Assuming that the data is in the same order and all we need is cbind
> ##    Combining values, activities, subjects
> testdata <- cbind(testactivitieswithdescr, testsubjects, testneededvalues)
> ####
> 
> ####
> ## Read in train variables
> ####
> trainvalues <- read.table(trainvariablesfile, col.names = allvariables$variablename)
> trainneededvalues <- trainvalues[ , neededvariables$variablename]
> ####
> 
> ## Read in train activities
> trainactivities <- read.table(trainactivityfile, col.names=c("activity"))
> ####
> 
> ####
> ## Read in train subjects
> trainsubjects <- read.table(trainsubjectfile, col.names=c("subject"))
> ####
> 
> ####
> ## Add a readable activity description
> trainactivitieswithdescr <- merge(trainactivities, activitylabels)
> ####
> 
> ####
> ## Put the train data together
> ##    Assuming that the data is in the same order and all we need is cbind
> ##    Combining values, activities, subjects
> traindata <- cbind(trainactivitieswithdescr, trainsubjects, trainneededvalues)
> ####
> 
> ####
> ## Combine the testdata and traindata
> ## Additionally make subject a factor
> alldata <- rbind(testdata, traindata) %>% select( -activity )
> alldata <- mutate(alldata, subject = as.factor(alldata$subject))
> ####
> 
> ####
> ## Write the data out
> write.table(alldata, "Mean_And_StdDev_For_Activity_Subject.txt")
> ####
> 
> ####
> ## Create a second, independent tidy data set with the average of each 
> ##        variable for each activity and each subject.
> ## Group the data by activity, subject
> allgroupeddata <- group_by(alldata,activitydescription,subject)
> ## Get the average of each variable
> summariseddata <- summarise_each(allgroupeddata, funs(mean))
Warning messages:
1: `summarise_each_()` is deprecated as of dplyr 0.7.0.
Please use `across()` instead.
This warning is displayed once every 8 hours.
Call `lifecycle::last_warnings()` to see where this warning was generated. 
2: `funs()` is deprecated as of dplyr 0.8.0.
Please use a list of either functions or lambdas: 

  # Simple named list: 
  list(mean = mean, median = median)

  # Auto named with `tibble::lst()`: 
  tibble::lst(mean, median)

  # Using lambdas
  list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))
This warning is displayed once every 8 hours.
Call `lifecycle::last_warnings()` to see where this warning was generated. 
> ## Write the data out
> write.table(summariseddata, "Average_Variable_By_Activity_Subject.txt", row.names = FALSE)
> #

> 
